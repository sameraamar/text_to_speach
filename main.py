# This is a sample Python script.

# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.


def print_hi(name):
    # Use a breakpoint in the code line below to debug your script.
    print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    print_hi('PyCharm')

    from gtts import gTTS

    # Define the text you want to convert to speech
    texts = [ """In this brief presentation, we introduce a tool that aims to enhance the evaluation and improvement of GPT-based text generation systems. Our goal is to provide valuable insights and control the quality of based systems generating texts. We introduce this tool in a time when the landscape of text-generation tools is still evolving.

Picture/Illustration: Image representing evaluation and improvement process
""",
              """Our tool offers comprehensive metrics for evaluating text quality. We provide a holistic assessment by analyzing factors such as readability, accuracy, bias, tone style, toxicity and much more. 
These metrics provide valuable insights into the strengths and areas for improvement in your text generation process
""",
              """Our tool enables you to uncover insights through powerful metrics for comparative text analysis. By utilizing advanced techniques like ADA embedding, COMET, and xlmRoberta, we facilitate a deeper understanding of semantic meaning, syntax, word choice, and sentence length. This helps you make informed decisions to enhance the prompt and the code of your GPT-based system.
""",
              """We want a tool with a focus on efficiency through automation and seamless integration. 
By automating the evaluation process and providing easy integration options, we aim to simplify your workflow. Our goal is to save you time and effort generating comparison reports while ensuring a smooth integration experience
""",
              """Now, let's take a closer look at our streamlined pipeline for comparing two versions: Code Version 1 and Code Version 2. The user can manually trigger or automate a regression test flow between the two versions. 
To mitigate the stochastic nature of the responses, we run Code Version 1 twice and compare the two response sets, generating a comprehensive comparison analysis. Next, we invoke Code Version 2 to generate new responses and compare them to the results obtained from Code Version 1. Implementing this approach by running the tests on hundreds of requests helps reduce the noise generated by the stochastic behavior.
Finally, using our multi-measurement ability, we generate a detailed report that summarizes the comparison results. This report is generated in a simple Excel file providing valuable insights and allows the user to make informed decisions based on the performance and impact of the code versions. 
Our goal is to enhance the regression testing process and provide a clear, robust, and comprehensive comparison of different versions.
""",
          """Our tool empowers users to have complete control over the text quality in their GPT-based text generation systems. With a user-friendly interface and access to valuable insights, you can make informed decisions based on data to enhance the quality and variation of your generated texts.To cater to different needs, we offer two modes of execution. The local mode is designed for developers, allowing them to evaluate their code changes before publishing them. It provides a convenient interface for testing through the Flask app server mode and supports simplified JSON requests, enabling seamless automation and integration into your workflow. You can easily invoke it using PostMan.To optimize the automation process, we leverage Power Automate, a robust tool that ensures a reliable and efficient automation pipeline. Once ready the report goes to your inbox as an email. 
This tool can work in any language (not only in English)! Exclamation: some metrics maybe not work properly in other languages, but this can be covered by running multi-metrics analysis as we do in the tool.
""",
              """Letâ€™s have a demo
"""
              ]


    # # Initialize a gTTS object
    # for i, text in enumerate(texts):
    #     tts = gTTS(text, lang='en-au')
    #
    #     # Save the speech as an audio file
    #     tts.save(f"output{i}.mp3")


# See PyCharm help at https://www.jetbrains.com/help/pycharm/

    import pyttsx3

    # Initialize the text-to-speech engine
    engine = pyttsx3.init()

    # Set properties (male voice and increased speed)
    engine.setProperty('rate', 170)  # Increase the speed to 200 words per minute
    voices = engine.getProperty('voices')
    engine.setProperty('voice', voices[0].id)  # Select a male voice (voices[0] is typically female)

    # Define the text you want to convert to speech
    text = "Hello, this is an example of text-to-speech conversion in Python."

    # Convert text to speech
    for i, text in enumerate(texts):
        engine.save_to_file(text, f'output_{i}.mp3')
        engine.runAndWait()  # Wait for the speech conversion to complete

    # Quit the engine
    engine.stop()
    print("done")

